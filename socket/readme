Socket编程

需掌握以下知识点：
1、网络基础知识
2、InetAddress类
3、URL
4、TCP编程
5、UDP编程

================ 网络基础知识 ==========================
两台主机需要有唯一的标识，用来表示所处在的身份所在的位置----------->ip地址
需要共同的语言，否则会出现言语不通--------------------------->协议
需要有端口号，一台程序有多个应用程序。如何辨别不同应用程序的通讯，需要用端口号来区分----------->端口

端口
区分不同应用程序，每一个应用程序都有一个不同的端口号，用来标识不同的应用程序。端口号为0~65535，其中0~1.23为系统所保留下来
IP地址和端口号组成了所谓的Socket，Socket是网络上运行的程序之间双向通信链路的终结点，是TCP和UDP的基础

TCP/IP协议
TCP/IP是目前世界上应用最为广泛的协议，是以TCP/IP为基础的不同层次上多个协议的集合，也称：TCP/IP协议栈或TCP/IP协议族

TCP/IP模型---------------------------------------------------------------->网络分层
5 应用层
4 传输层
3 网络层
2 数据链接层
1 物理层-------->网口，网线之类


==================== Java中的网络支持 ========================================
针对网络通信的不同层次，Java提供的网络功能有四大类：
1、InetAddress：用于标识网络上的硬件资源，通俗讲主要标识ip地址等相关信息
2、URL：统一资源定位符，通过URL可以直接图区或写入网络上的数据
3、Sockets：使用TCP协议实现网络通信的Socket相关的类。
4、Datagram：使用UDP协议，将数据保存在数据报中，通过网络进行通信

====================== InetAddressl类 ===========================================
通过InetAddress.getLocalHost()可以返回InetAddress实例---------------------------------------------->案例MyClass.java
InetAddress address = InetAddress.getLocalHost();

======================= URL =======================================================
1、URL统一资源定位符，表示Internet上魔衣资源的地址------------------------------------------------->案例Test02.java
2、URL由两部分组成：协议名称和资源名称，中间用冒号隔开
    如https://www.baidu.com，https-->协议，www.baidu.com---->资源名称
3、在Java.net包中，听过了URL类来表示URL。

使用URL读取网页内容--------------------------------------------------------------------------------->案例Test03.java
    1、通过URL对象的openStream()方法可以得到指定资源的输入流
    2、通过输入流可以读取、访问网络上的数据

======================== Socket通信 ===================================================
TCP协议是面向连接、可靠的、有序的，以字节流的方式发送数据
基于TCP协议实现网络通信的类
    客户端的Socket类
    服务器端的ServerSocket类

Socket通信模型：
        socket                                                               clint
    建立服务端倾听socket
    等待并接受连接请求            <-------- 建立连接 ----->            创建连接socket向服务端发送请求
    接受请求后创建连接socket
    InputStream                   <--------  通信  ------->                 OutputStream
    OutputStream                  <--------  通信  ------->                 InputStream
    关闭socket及相关资源          <-------- 结束通信 ----->              关闭socket及相关资源

Socket通信代码实现步骤：
    1、创建ServerSocket和Socket类
    2、打开连接到Socket的输入/输出流
    3、按照协议对Socket进行读/写操作
    4、关闭输入输出流、关闭Socket

    服务端：--------------------------------------------------------------------------------------->案例Server.java
        1、创建ServerSocket对象，绑定监听端口
        2、通过accept()方法监听客户端请求
        3、连接建立后，通过输入流读取客户端发送的请求信息
        4、通过输入流向客户端发送响应信息
        5、关闭相关资源
    客户端：--------------------------------------------------------------------------------------->案例Client.java
        1、创建Socket对象，指明需要连接的服务器的地址和端口号
        2、连接建立后，通过输入流向服务端发送请求信息
        3、通过输入流获取服务器响应的信息
        4、关闭相关资源
     先启动服务端，在启动客户端

多线程服务器-------------------------------------------------------------------------------------->案例Server.java/ServerThread.java/Client.java
    应用多线程来时间服务器与多客户端之间的通信
    基本步骤：
        1、服务器端创建ServerSocket，循环调用accept()等待客户端连接
        2、客户端创建一个socket并请求和服务端连接
        3、服务器端接受客户端请求，创建socker与该客户建立专线连接
        4、建立连接的两个socket在一个段都的线程上对话
        5、服务器端继续等待新的连接

========================================= UDP 编程 =================================================
UDP协议（用户数据报协议）是无连接、不可靠的、无序的
//UDP传输相对来说比较快

UDP协议以数据报作为数据传输的载体，进行数据传输时，首先需要将要传输的数据定义成数据报（Datagram），
    在数据报中指明数据所要达到的Socket（主机地址和端口号），然后在将数据报发送出去。

相关操作类：
    DatagramPacket：表示数据报包
    DatagramSocket：进行端到端通信的类

服务器端实现步骤：--------------------------------------------------------------------------------->案例UDPServer.java
    1、创建DatagramSocket，指定端口号
    2、创建DatagramPacket
    3、接受客户端发送的数据信息
    4、读取数据
客户端实现步骤：----------------------------------------------------------------------------------->案例UDPClient.java
    1、定义发送信息
    2、创建DatagramPacket，包含将要发送的信息
    3、创建DatagramSocket
    4、发送数据


============================================= 总结 =======================================================
多线程的优先级问题：
    如果未设置优先级可能会导致运行时数据非常慢，可降低优先级

对于同一个socket，如果关闭了输出流，则与该输出流关联的socket也会被关闭，所以一般不用关闭流，直接关闭socket

一般使用TCP通信传输的是对象，所以一般用ObjectOutputStream
            Socket socket1 = new Socket("PC-20150322CTRI",8888);
            OutputStream os = socket1.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            User user = new User("admin", "123");
            oos.writeObject(user);

socket编程传递文件























