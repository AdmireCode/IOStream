Socket编程

需掌握以下知识点：
1、网络基础知识
2、InetAddress类
3、URL
4、TCP编程
5、UDP编程

================ 网络基础知识 ==========================
两台主机需要有唯一的标识，用来表示所处在的身份所在的位置----------->ip地址
需要共同的语言，否则会出现言语不通--------------------------->协议
需要有端口号，一台程序有多个应用程序。如何辨别不同应用程序的通讯，需要用端口号来区分----------->端口

端口
区分不同应用程序，每一个应用程序都有一个不同的端口号，用来标识不同的应用程序。端口号为0~65535，其中0~1.23为系统所保留下来
IP地址和端口号组成了所谓的Socket，Socket是网络上运行的程序之间双向通信链路的终结点，是TCP和UDP的基础

TCP/IP协议
TCP/IP是目前世界上应用最为广泛的协议，是以TCP/IP为基础的不同层次上多个协议的集合，也称：TCP/IP协议栈或TCP/IP协议族

TCP/IP模型---------------------------------------------------------------->网络分层
5 应用层
4 传输层
3 网络层
2 数据链接层
1 物理层-------->网口，网线之类


==================== Java中的网络支持 ========================================
针对网络通信的不同层次，Java提供的网络功能有四大类：
1、InetAddress：用于标识网络上的硬件资源，通俗讲主要标识ip地址等相关信息
2、URL：统一资源定位符，通过URL可以直接图区或写入网络上的数据
3、Sockets：使用TCP协议实现网络通信的Socket相关的类。
4、Datagram：使用UDP协议，将数据保存在数据报中，通过网络进行通信

====================== InetAddressl类 ===========================================
通过InetAddress.getLocalHost()可以返回InetAddress实例---------------------------------------------->案例MyClass.java
InetAddress address = InetAddress.getLocalHost();

======================= URL =======================================================
1、URL统一资源定位符，表示Internet上魔衣资源的地址------------------------------------------------->案例Test02.java
2、URL由两部分组成：协议名称和资源名称，中间用冒号隔开
    如https://www.baidu.com，https-->协议，www.baidu.com---->资源名称
3、在Java.net包中，听过了URL类来表示URL。

使用URL读取网页内容--------------------------------------------------------------------------------->Test03.java
    1、通过URL对象的openStream()方法可以得到指定资源的输入流
    2、通过输入流可以读取、访问网络上的数据

======================== Socket通信 ===================================================
TCP协议是面向连接、可靠的、有序的，以字节流的方式发送数据
基于TCP协议实现网络通信的类
    客户端的Socket类
    服务器端的ServerSocket类

Socket通信模型：
    socket                                                               clint
建立服务端倾听socket
等待并接受连接请求            <-------- 建立连接------>            创建连接socket向服务端发送请求
接受请求后创建连接socket
InputStream                   <--------  通信  ------->                 OutputStream
OutputStream                  <--------  通信  ------->                 InputStream


































