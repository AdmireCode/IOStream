new file mode 100644
@@ -0,0 1,86 @@
1、
InputSteam输入流基本方法
in.read(int b)读取一个byte
in.read(byte[] buf)
in.read(byte[] buf, int start, int size)

OutputStream输出流基本方法
out.write(int b) 写出一个byte到流，b的低8位
out.write(byte[] buf)将buf字节数组都写到流
out.write(byte[] buf, int start, int size)

FileInputStream ---> 继承了InputStream，具体实现了文件上读取数据
FileOutputStream --->继承了OutputStream，实现了向文件中写出byte数据的方法

DataOutputStream/DataInputStream
    对“流”功能的扩展，可以更加方便的读取int,long，字符等类型数据（主要针对类型数据）
    DataOutputStream
        writeInt()/writeDouble()/writeUTF()主要是这些方法里面已经封装好了，如writeInt()里面包装好了写入4个字节

BufferedInputStream&BufferedOuputStream
    这两个流类位IO提供了带缓冲区的操作，一般打开文件进行写入或读取操作时，都会加上缓冲，这种
    流模式提高了IO的性能从应用程序中把输入放入文件，相当于将一缸水倒入另一缸中：
    FileOutputStream--->write()方法相当于一滴一滴地把水“转移”过去；
    DataOutputStream--->writeXxx()方法会方便一些，相当于一瓢一瓢把水“转移”过去；
    BufferedOutputStream---write()方法更方便，相当于一瓢一瓢先放入桶中，再从桶中倒入另一个缸中，性能提高了

    /**
     * 批量读取 适合读取大文件 效率高，也是常用的方式
     */
    public static void printHexByByteArray(String fileName)throws IOException{//批量读取数据
        FileInputStream in = new FileInputStream(fileName);
        byte[] buf = new byte[20 * 1024];
        //从in中批量读取字节，放到buf这个字节数组中，从第0个位置开始放，
        // 最多放buf.length个 返回的是独到的自己的个数
        //方法一
/*        int bytes = in.read(buf, 0, buf.length);//一次性读完，说明字节数组足够大
        int j = 1;
        for(int i = 0; i < bytes; i++){
            if(buf[i] <= 0xf){//如果是一个数的时候前面补零
                System.out.print("0");
            }
            System.out.print(Integer.toHexString(buf[i]) + " ");
            if(j++ % 10 == 0){
                System.out.println();
            }
        }*/
        //方法二
        int bytes = 0;
        int j = 1;
        while((bytes = in.read(buf, 0, buf.length)) != -1){
            System.out.println("bytes:" + bytes);
            for(int i = 0; i < bytes; i++){
                System.out.print(Integer.toHexString(buf[i] & 0xff) + " ");//byte类型8位，int类型32位，
                // 为了避免数据转换错误，通过&0xff将高24为清零
                if(j++ %10 ==0){
                    System.out.println();
                }
            }
        }
        System.out.println("bytes:" + bytes);
        in.close();
    }

2、字符流
    编码问题

    认识文本和文本文件
    Java的文本(char)是16位无符号整数，是字符的unicode编码（双字节编码）
    文件什么，文件是byte byte byte...的数据序列
    文本文件是什么，文本文件是文本(char)序列按照某种编码方案(utf-8,utf-16be,gbk)序列化为byte的存储结果

    字符流(Reader Writer)(也分为输出流和输入流)----> 操作的是文本文本文件，默认按照gbk解析
    字符的处理，一次处理一个字符
    字符的底层仍然是基本的字节序列

    字符流的基本实现
        InputStreamReader  完成byte流解析为char流，按照编码解析
        OutputStreamWriter 按照char流到byte流，安装编码处理

        FileReader/FileWriter

    字符流的过滤器
        BufferedReader ---> readLine 一次读一行
        BufferedWriter/PrintWrite ---> 写一行



